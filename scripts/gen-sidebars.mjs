#!/usr/bin/env node
/**
 * Auto-generate docs/.vuepress/sidebar.js from the current folder tree.
 * - Scans: docs/, docs/nl/, docs/ar/
 * - Creates per-locale sidebar maps that tell Theme Hope to use 'structure'
 * - More specific section paths (e.g. /events/) are added so they take precedence
 *
 * Run: node scripts/gen-sidebars.mjs
 */

import { promises as fs } from 'node:fs'
import path from 'node:path'

const ROOT = process.cwd()
const VUEPRESS_DIR = path.join(ROOT, 'docs', '.vuepress')
const OUT_FILE = path.join(VUEPRESS_DIR, 'sidebar.js')

// Locale roots to scan
const LOCALES = [
  { name: 'en', prefix: '/', dir: path.join(ROOT, 'docs') },
  { name: 'nl', prefix: '/nl/', dir: path.join(ROOT, 'docs', 'nl') },
  { name: 'ar', prefix: '/ar/', dir: path.join(ROOT, 'docs', 'ar') },
]

// Directories to ignore at each locale root
const IGNORE = new Set(['.vuepress', '.git', 'public', 'assets', 'images', 'img', 'media', 'temp', 'node_modules'])

async function exists(p) {
  try { await fs.stat(p); return true } catch { return false }
}

async function listSubdirs(dir) {
  if (!(await exists(dir))) return []
  const entries = await fs.readdir(dir, { withFileTypes: true })
  return entries
    .filter(d => d.isDirectory() && !IGNORE.has(d.name))
    .map(d => d.name)
    .sort((a, b) => a.localeCompare(b))
}

// Build a sidebar map for one locale
async function buildSidebarFor({ prefix, dir }) {
  const subdirs = await listSubdirs(dir)

  // Always include the locale root so everything falls back to 'structure'
  // Then add each top-level section for more specific matching.
  const map = { [prefix]: 'structure' }

  for (const d of subdirs) {
    // Only include if the section contains some markdown content
    const abs = path.join(dir, d)
    const containsMd = await hasMarkdown(abs)
    if (containsMd) {
      const sectionPath = path.posix.join(prefix, d, '/') // ensures trailing slash
      map[sectionPath] = 'structure'
    }
  }
  return map
}

async function hasMarkdown(absDir) {
  const entries = await fs.readdir(absDir, { withFileTypes: true })
  for (const e of entries) {
    if (e.isFile() && e.name.toLowerCase().endsWith('.md')) return true
    if (e.isDirectory()) {
      if (IGNORE.has(e.name)) continue
      if (await hasMarkdown(path.join(absDir, e.name))) return true
    }
  }
  return false
}

function toExport(name, obj) {
  const lines = Object.entries(obj)
    .sort((a, b) => a[0].localeCompare(b[0]))
    .map(([k, v]) => `  ${JSON.stringify(k)}: ${JSON.stringify(v)},`)
    .join('\n')
  return `export const ${name}Sidebar = {\n${lines}\n}\n`
}

async function main() {
  // Ensure output dir exists
  await fs.mkdir(VUEPRESS_DIR, { recursive: true })

  // Generate maps
  const sidebars = {}
  for (const loc of LOCALES) {
    sidebars[loc.name] = await buildSidebarFor(loc)
  }

  // Compose file
  const banner =
    `// AUTO-GENERATED by scripts/gen-sidebars.mjs — do not edit by hand.\n` +
    `// Re-run the script after adding/removing docs to refresh this file.\n\n`

  const content =
    banner +
    toExport('en', sidebars.en) + '\n' +
    toExport('nl', sidebars.nl) + '\n' +
    toExport('ar', sidebars.ar)

  await fs.writeFile(OUT_FILE, content, 'utf8')
  console.log(`✔ Wrote ${path.relative(ROOT, OUT_FILE)}`)
}

main().catch(err => {
  console.error(err)
  process.exit(1)
})

